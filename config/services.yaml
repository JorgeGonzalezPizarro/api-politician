# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    mongodb_server: mongodb://localhost:27017

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Politicians\Api\:
        resource: '../src/Politicians/Api'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    main.controller:
        class: App\Politicians\Infrastructure\Api\MainController
        arguments: ['@request_stack','@tactician.commandbus.default']
        tags: ['controller.service_arguments']
        public: true
    get.politicians.controller:
        class: App\Politicians\Api\GetPoliticiansPagination
        tags: ['controller.service_arguments']
        public: true
    list.politicians.service:
        class: App\Politicians\Service\Get\GetPoliticians
        arguments: ['@policitans.repository.mongo', '@pagination.service','@politician.transformer']
        tags:
        - { name: tactician.handler, command: App\Politicians\Service\Get\GetPoliticiansDto , typehints: true}

    create.politicians.service:
           class: App\Politicians\Service\Create\CreatePolitician
           arguments: ['@policitans.repository.mongo','']
           tags:
           - { name: tactician.handler, command: App\Politicians\Service\Create\CreatePoliticianDto , typehints: true}
    update.politicians.service:
             class: App\Politicians\Service\Update\UpdatePolitician
             arguments: ['@policitans.repository.mongo','']
             tags:
             - { name: tactician.handler, command: App\Politicians\Service\Update\UpdatePoliticianDto , typehints: true}
    policitans.repository.mongo:
      class: App\Politicians\Infrastructure\Persisntance\Politicians\PoliticiansMongoRepository
      arguments: ['@doctrine_mongodb.odm.default_document_manager']

    pagination.service:
      class: App\Politicians\Service\Get\PaginationService\PaginationService
      arguments: ['@policitans.repository.mongo' ,'@pagination.transformer']

    politician.transformer:
      class: App\Politicians\Service\Transformer\PoliticianTransformer
    pagination.transformer:
      class: App\Politicians\Service\Transformer\PaginationTransformer

    uuid.mongo:
      class: App\Politicians\Infrastructure\Persisntance\MongoIdGenerator
      arguments : ['@doctrine_mongodb.odm.default_document_manager']

    app.cors_listener:
      class:  App\Politicians\Infrastructure\Api\CorsListener
      tags:
        - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }